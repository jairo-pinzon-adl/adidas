{"version":3,"sources":["components/Header.js","components/InfoContainer.js","components/ErrorProduct.js","components/productViewer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","Component","InfoContainer","href","ErrorProduct","src","alt","ProductViewer","props","state","productoInfo","errorLoading","currentComponent","this","fetch","method","mode","credentials","then","res","json","result","setState","catch","App","error","info","console","log","Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uRASeA,EAPf,iLAEQ,OAAS,yBAAKC,UAAY,aAAjB,6BAFjB,GAAqCC,aCetBC,G,KAdf,8NAMI,OACG,yBAAKF,UAAU,iBACd,uBAAGA,UAAU,cAAcG,KAAK,KAAhC,sBARR,GAAmCF,cCSpBG,EAVf,iLAEI,OACG,yBAAKJ,UAAU,kBACd,yBAAKK,IAAI,qBAAqBC,IAAI,eAJ1C,GAAkCL,aCqDnBM,EAlDf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAO,CACVC,aAAc,GACdC,cAAc,GALC,EADrB,iFAWI,IAAIC,EAAmBC,KAEvBC,MAAM,yCAA0C,CAC9CC,OAAQ,MACRC,KAAM,UACNC,YAAa,gBAEdC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJT,EAAiBU,SAAS,CACxBZ,aAAcW,OAEfE,OAAM,WACPX,EAAiBU,SAAS,CACxBX,cAAc,SAzBtB,+BA+BI,OACE,yBAAKX,UAAU,iBACd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBACda,KAAKJ,MAAME,aACV,kBAAC,EAAD,MAEC,yBAAKL,IAAI,OAAOD,IAAI,yFAIzB,yBAAKL,UAAU,cACf,kBAAC,EAAD,YA3CP,GAAmCC,aCsCpBuB,G,MAtCf,YAKE,aAAe,IAAD,8BACZ,+CALFf,MAAO,CACLC,aAAc,IAMdI,MAAM,iCAAkC,CACtCC,OAAQ,OACRC,KAAM,UACNC,YAAa,gBAEdC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZZ,aAAcW,OAXN,EALhB,+EAqBoBI,EAAOC,GACvBC,QAAQC,IAAI,MAAOH,EAAOC,KAtB9B,+BA2BI,OADAC,QAAQC,IAAIf,KAAKJ,OAEf,yBAAKT,UAAU,OACd,kBAAC6B,EAAD,MACA,8BACC,kBAAC,EAAD,YA/BR,GAAyB5B,cCOL6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAE,GACLE,QAAQF,MAAMA,EAAMmB,c","file":"static/js/main.4296d8ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class HeaderComponent extends Component {\n    render() {\n        return ( <div className = \"HeaderApp\" > Links in the header </div>\n        );\n    }\n}\n\nexport default HeaderComponent;","import React, { Component } from 'react';\nimport './productViewer.css';\n\nexport class InfoContainer extends Component {\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n       <div className=\"infoContainer\">\n        <a className=\"addToBasket\" href=\"#\">add to basket</a>\n        </div>\n    );\n  }\n}\n\nexport default InfoContainer;\n","import React, { Component } from 'react';\n\nexport class ErrorProduct extends Component {\n  render() {\n    return (\n       <div className=\"ErrorContainer\">\n        <img src=\"./images/error.jpg\" alt=\"error\" />\n      </div>\n    );\n  }\n}\n\nexport default ErrorProduct;\n","import React, { Component } from 'react';\nimport InfoContainer from './InfoContainer'\nimport ErrorProduct from './ErrorProduct'\nimport './productViewer.css';\n\nexport class ProductViewer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state= {\n      productoInfo: {},\n      errorLoading: false\n    }\n  }\n\n  componentDidMount() {\n    let currentComponent = this;\n\n    fetch('https://adidas.com/api/products/C77124', {\n      method: 'GET',\n      mode: 'no-cors',\n      credentials: 'same-origin'\n    })\n    .then(res => res.json())\n    .then(result => {\n      currentComponent.setState({\n        productoInfo: result\n      });\n    }).catch(function() {\n      currentComponent.setState({\n        errorLoading: true\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"productViewer\">\n       <div className=\"imageViewer\">\n         <div className=\"imageContainer\">\n         {this.state.errorLoading ? (\n           <ErrorProduct />\n         ) : (\n            <img alt=\"test\" src=\"https://dafitistaticco-a.akamaihd.net/p/adidas-performance-9008-2173401-1-zoom.jpg\"/>\n         )}\n         </div>\n       </div>\n       <div className=\"infoViewer\">\n       <InfoContainer></InfoContainer>\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default ProductViewer;\n","import React, { Component } from 'react';\nimport HeaderComponent from './components/Header';\nimport ProductViewer from './components/productViewer';\nimport './App.css';\n\nexport class App extends Component {\n  state= {\n    productoInfo: {}\n  }\n  \n  constructor() {\n    super();\n\n    fetch('adidas.com/api/checkout/basket', {\n      method: 'POST',\n      mode: 'no-cors',\n      credentials: 'same-origin'\n    })\n    .then(res => res.json())\n    .then(result => {\n      this.setState({\n        productoInfo: result\n      });\n    });\n  }\n\n  componentDidCatch(error, info) {\n    console.log('hey', error, info)\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n       <HeaderComponent></HeaderComponent>\n       <main>\n        <ProductViewer></ProductViewer>\n       </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}