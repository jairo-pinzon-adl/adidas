{"version":3,"sources":["components/Header.js","components/InfoContainer.js","components/ErrorProduct.js","components/productViewer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","Component","InfoContainer","props","handleAddBasket","e","fetch","method","mode","credentials","body","JSON","stringify","productId","quantity","recipe","articleNumber","selectedOptions","sku","countrySize","technicalSize","recipeId","customizationRecipeId","masterProductId","displaySize","captchaResponse","segmentationId","then","res","json","result","setState","addingStatus","catch","this","addingError","state","errorLoading","onClick","disabled","defaultProps","ErrorProduct","src","alt","ProductViewer","productoInfo","currentComponent","App","error","info","console","log","Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec6560b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class HeaderComponent extends Component {\n    render() {\n        return ( <div className = \"HeaderApp\" > Links in the header </div>\n        );\n    }\n}\n\nexport default HeaderComponent;","import React, { Component } from 'react';\nimport './productViewer.css';\n\nexport class InfoContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state =  {\n      addingStatus: {},\n      addingError: false,\n      errorLoading: this.props.errorLoading\n    }\n  }\n\n  handleAddBasket = (e) => {\n    const dataToAdd = [\n      {\n        productId: 'TEMP',\n        quantity: 1,\n        recipe: {\n          articleNumber: 'temp',\n          quantity: 1,\n          selectedOptions: {},\n          sku: '560',\n          countrySize: '42',\n          technicalSize: '40'\n        },\n        recipeId: '34234234',\n        customizationRecipeId: '123123123',\n        masterProductId: '123123123',\n        displaySize: '45',\n        captchaResponse: '23',\n        segmentationId: '65'\n      }\n    ]\n\n    fetch('http://adidas.com/api/checkout/basket', {\n      method: 'POST',\n      mode: 'no-cors',\n      credentials: 'same-origin',\n      body: JSON.stringify(dataToAdd)\n    })\n    .then(res => res.json())\n    .then(result => {\n      this.setState({\n        addingStatus: result\n      });\n    }).catch(function() {\n      this.setState({\n        addingError: true\n      })\n    });\n  }\n\n  render() {\n    return (\n       <div className=\"infoContainer\">\n       <div className=\"data\">\n       {this.state.errorLoading ? (\n         <div>\n           <h2>No data</h2>\n           <p>We can't get the full info about this product</p>\n         </div>\n       ) : (\n         <div>\n           <h2>Data</h2>\n           <p>The information about the product</p>\n         </div>\n       )}\n       </div>\n        <button className=\"addToBasket\" onClick={this.handleAddBasket} disabled={this.props.errorLoading}>add to basket</button>\n        </div>\n    );\n  }\n}\n\nInfoContainer.defaultProps = {\n  errorLoading: false,\n  addingError: false\n}\n\nexport default InfoContainer;\n","import React, { Component } from 'react';\n\nexport class ErrorProduct extends Component {\n  render() {\n    return (\n       <div className=\"ErrorContainer\">\n       <h1>Error</h1>\n        <p>This product couldn't be loaded</p>\n        <img src=\"https://img.pngio.com/joy-upside-down-transparent-png-stickpng-inside-out-inside-out-sadness-png-840_995.png\" alt=\"error\" />\n      </div>\n    );\n  }\n}\n\nexport default ErrorProduct;\n","import React, { Component } from 'react';\nimport InfoContainer from './InfoContainer'\nimport ErrorProduct from './ErrorProduct'\nimport './productViewer.css';\n\nexport class ProductViewer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state= {\n      productoInfo: {},\n      errorLoading: false\n    }\n  }\n\n  componentDidMount() {\n    let currentComponent = this;\n\n    fetch('https://adidas.com/api/products/C77124', {\n      method: 'GET',\n      mode: 'no-cors',\n      credentials: 'same-origin'\n    })\n    .then(res => res.json())\n    .then(result => {\n      currentComponent.setState({\n        productoInfo: result\n      });\n    }).catch(function() {\n      currentComponent.setState({\n        errorLoading: true\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"productViewer\">\n       <div className=\"imageViewer\">\n         <div className=\"imageContainer\">\n         {this.state.errorLoading ? (\n           <ErrorProduct />\n         ) : (\n            <img alt=\"test\" src=\"https://dafitistaticco-a.akamaihd.net/p/adidas-performance-9008-2173401-1-zoom.jpg\"/>\n         )}\n         </div>\n       </div>\n       <div className=\"infoViewer\">\n       <InfoContainer errorLoading={this.state.errorLoading}></InfoContainer>\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default ProductViewer;\n","import React, { Component } from 'react';\nimport HeaderComponent from './components/Header';\nimport ProductViewer from './components/productViewer';\nimport './App.css';\n\nexport class App extends Component {\n  state= {\n    productoInfo: {}\n  }\n\n  constructor() {\n    super();\n    \n    fetch('adidas.com/api/checkout/basket', {\n      method: 'POST',\n      mode: 'no-cors',\n      credentials: 'same-origin'\n    })\n    .then(res => res.json())\n    .then(result => {\n      this.setState({\n        productoInfo: result\n      });\n    });\n  }\n\n  componentDidCatch(error, info) {\n    console.log('hey', error, info)\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n       <HeaderComponent></HeaderComponent>\n       <main>\n        <ProductViewer></ProductViewer>\n       </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}